<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: inventory/v1/inventory.proto

namespace Inventory\V1;

use UnexpectedValueException;

/**
 * Protobuf type <code>inventory.v1.InventoryType</code>
 */
class InventoryType
{
    /**
     * Generated from protobuf enum <code>INVENTORY_TYPE_UNSPECIFIED = 0;</code>
     */
    const INVENTORY_TYPE_UNSPECIFIED = 0;
    /**
     * Generated from protobuf enum <code>INVENTORY_TYPE_FAULTY = 1;</code>
     */
    const INVENTORY_TYPE_FAULTY = 1;
    /**
     * Generated from protobuf enum <code>INVENTORY_TYPE_NEW = 2;</code>
     */
    const INVENTORY_TYPE_NEW = 2;
    /**
     * Generated from protobuf enum <code>INVENTORY_TYPE_SELL = 3;</code>
     */
    const INVENTORY_TYPE_SELL = 3;
    /**
     * Generated from protobuf enum <code>INVENTORY_TYPE_SWAP = 4;</code>
     */
    const INVENTORY_TYPE_SWAP = 4;
    /**
     * Generated from protobuf enum <code>INVENTORY_TYPE_OWN_USE = 5;</code>
     */
    const INVENTORY_TYPE_OWN_USE = 5;

    private static $valueToName = [
        self::INVENTORY_TYPE_UNSPECIFIED => 'INVENTORY_TYPE_UNSPECIFIED',
        self::INVENTORY_TYPE_FAULTY => 'INVENTORY_TYPE_FAULTY',
        self::INVENTORY_TYPE_NEW => 'INVENTORY_TYPE_NEW',
        self::INVENTORY_TYPE_SELL => 'INVENTORY_TYPE_SELL',
        self::INVENTORY_TYPE_SWAP => 'INVENTORY_TYPE_SWAP',
        self::INVENTORY_TYPE_OWN_USE => 'INVENTORY_TYPE_OWN_USE',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

