<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: types/v1/shipping.proto

namespace Types\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 * Generated from protobuf message <code>types.v1.ShippingMethod</code>
 */
class ShippingMethod extends \Google\Protobuf\Internal\Message
{
    protected $method;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type bool $is_pickup
     *     @type \Types\V1\Shipment $shipment
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Types\V1\Shipping::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>bool is_pickup = 1 [json_name = "isPickup"];</code>
     * @return bool
     */
    public function getIsPickup()
    {
        return $this->readOneof(1);
    }

    public function hasIsPickup()
    {
        return $this->hasOneof(1);
    }

    /**
     * Generated from protobuf field <code>bool is_pickup = 1 [json_name = "isPickup"];</code>
     * @param bool $var
     * @return $this
     */
    public function setIsPickup($var)
    {
        GPBUtil::checkBool($var);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.types.v1.Shipment shipment = 2 [json_name = "shipment"];</code>
     * @return \Types\V1\Shipment|null
     */
    public function getShipment()
    {
        return $this->readOneof(2);
    }

    public function hasShipment()
    {
        return $this->hasOneof(2);
    }

    /**
     * Generated from protobuf field <code>.types.v1.Shipment shipment = 2 [json_name = "shipment"];</code>
     * @param \Types\V1\Shipment $var
     * @return $this
     */
    public function setShipment($var)
    {
        GPBUtil::checkMessage($var, \Types\V1\Shipment::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getMethod()
    {
        return $this->whichOneof("method");
    }

}

