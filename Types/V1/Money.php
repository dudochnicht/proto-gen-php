<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: types/v1/money.proto

namespace Types\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 * Money represents a monetary value with a specific currency.
 *
 * Generated from protobuf message <code>types.v1.Money</code>
 */
class Money extends \Google\Protobuf\Internal\Message
{
    /**
     * ISO 4217 currency code, always uppercase and 3 letters (e.g. "EUR", "USD").
     *
     * Generated from protobuf field <code>string currency_code = 1 [json_name = "currencyCode"];</code>
     */
    protected $currency_code = '';
    /**
     * Amount in minor units (e.g. cents for EUR/USD, yen for JPY).
     * Example: 12345 = 123.45 EUR
     *
     * Generated from protobuf field <code>int64 amount = 2 [json_name = "amount"];</code>
     */
    protected $amount = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $currency_code
     *           ISO 4217 currency code, always uppercase and 3 letters (e.g. "EUR", "USD").
     *     @type int|string $amount
     *           Amount in minor units (e.g. cents for EUR/USD, yen for JPY).
     *           Example: 12345 = 123.45 EUR
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Types\V1\Money::initOnce();
        parent::__construct($data);
    }

    /**
     * ISO 4217 currency code, always uppercase and 3 letters (e.g. "EUR", "USD").
     *
     * Generated from protobuf field <code>string currency_code = 1 [json_name = "currencyCode"];</code>
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->currency_code;
    }

    /**
     * ISO 4217 currency code, always uppercase and 3 letters (e.g. "EUR", "USD").
     *
     * Generated from protobuf field <code>string currency_code = 1 [json_name = "currencyCode"];</code>
     * @param string $var
     * @return $this
     */
    public function setCurrencyCode($var)
    {
        GPBUtil::checkString($var, True);
        $this->currency_code = $var;

        return $this;
    }

    /**
     * Amount in minor units (e.g. cents for EUR/USD, yen for JPY).
     * Example: 12345 = 123.45 EUR
     *
     * Generated from protobuf field <code>int64 amount = 2 [json_name = "amount"];</code>
     * @return int|string
     */
    public function getAmount()
    {
        return $this->amount;
    }

    /**
     * Amount in minor units (e.g. cents for EUR/USD, yen for JPY).
     * Example: 12345 = 123.45 EUR
     *
     * Generated from protobuf field <code>int64 amount = 2 [json_name = "amount"];</code>
     * @param int|string $var
     * @return $this
     */
    public function setAmount($var)
    {
        GPBUtil::checkInt64($var);
        $this->amount = $var;

        return $this;
    }

}

